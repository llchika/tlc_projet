@startuml

actor User as U
participant MainProgramm as S
participant Lexer as L
participant Verificator as V
participant IntCodeGenerator as IG
participant Optimiser as O
participant CppGenerator as Cpp


activate S

U -> S : ./compiloWhile <file>.while

S -> L : generateAST()
activate L
L --> S : return a filled AST
deactivate L



S -> V : checkSemantic(Tree AST)
activate V
V --> S : no problem
deactivate V


S -> IG : generateCode(Tree AST)
activate IG
IG -> IG : write the code as a\nlist of instructions
IG --> S : code generated
deactivate IG
S --> U : Write the intermediar code\nin a file for debug
S -> O : optimise(Instruction3Ad* code)
activate O
O --> S : code optimised
deactivate O
S --> U : Write the optimisate code\nin a file for debug

S -> Cpp : generateCode(Instruction3Ad* code3ad)
activate Cpp
Cpp -> Cpp : writeInFile()
activate Cpp
deactivate Cpp
deactivate Cpp

S --> U : code generated in file\n<filepath>
deactivate S


@enduml
